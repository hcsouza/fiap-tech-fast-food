// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "github.com/hcsouza/fiap-tech-fast-food/internal/core/domain"
	mock "github.com/stretchr/testify/mock"

	orderStatus "github.com/hcsouza/fiap-tech-fast-food/internal/core/valueObject/orderStatus"
)

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// FindAllByStatus provides a mock function with given fields: status
func (_m *MockOrderRepository) FindAllByStatus(status orderStatus.OrderStatus) ([]domain.Order, error) {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByStatus")
	}

	var r0 []domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(orderStatus.OrderStatus) ([]domain.Order, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(orderStatus.OrderStatus) []domain.Order); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(orderStatus.OrderStatus) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_FindAllByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByStatus'
type MockOrderRepository_FindAllByStatus_Call struct {
	*mock.Call
}

// FindAllByStatus is a helper method to define mock.On call
//   - status orderStatus.OrderStatus
func (_e *MockOrderRepository_Expecter) FindAllByStatus(status interface{}) *MockOrderRepository_FindAllByStatus_Call {
	return &MockOrderRepository_FindAllByStatus_Call{Call: _e.mock.On("FindAllByStatus", status)}
}

func (_c *MockOrderRepository_FindAllByStatus_Call) Run(run func(status orderStatus.OrderStatus)) *MockOrderRepository_FindAllByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(orderStatus.OrderStatus))
	})
	return _c
}

func (_c *MockOrderRepository_FindAllByStatus_Call) Return(_a0 []domain.Order, _a1 error) *MockOrderRepository_FindAllByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_FindAllByStatus_Call) RunAndReturn(run func(orderStatus.OrderStatus) ([]domain.Order, error)) *MockOrderRepository_FindAllByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockOrderRepository) FindById(id string) (*domain.Order, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockOrderRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id string
func (_e *MockOrderRepository_Expecter) FindById(id interface{}) *MockOrderRepository_FindById_Call {
	return &MockOrderRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockOrderRepository_FindById_Call) Run(run func(id string)) *MockOrderRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrderRepository_FindById_Call) Return(_a0 *domain.Order, _a1 error) *MockOrderRepository_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_FindById_Call) RunAndReturn(run func(string) (*domain.Order, error)) *MockOrderRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: order
func (_m *MockOrderRepository) Save(order *domain.Order) (string, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Order) (string, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(*domain.Order) string); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockOrderRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - order *domain.Order
func (_e *MockOrderRepository_Expecter) Save(order interface{}) *MockOrderRepository_Save_Call {
	return &MockOrderRepository_Save_Call{Call: _e.mock.On("Save", order)}
}

func (_c *MockOrderRepository_Save_Call) Run(run func(order *domain.Order)) *MockOrderRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Order))
	})
	return _c
}

func (_c *MockOrderRepository_Save_Call) Return(_a0 string, _a1 error) *MockOrderRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_Save_Call) RunAndReturn(run func(*domain.Order) (string, error)) *MockOrderRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: order
func (_m *MockOrderRepository) Update(order *domain.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockOrderRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - order *domain.Order
func (_e *MockOrderRepository_Expecter) Update(order interface{}) *MockOrderRepository_Update_Call {
	return &MockOrderRepository_Update_Call{Call: _e.mock.On("Update", order)}
}

func (_c *MockOrderRepository_Update_Call) Run(run func(order *domain.Order)) *MockOrderRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Order))
	})
	return _c
}

func (_c *MockOrderRepository_Update_Call) Return(_a0 error) *MockOrderRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderRepository_Update_Call) RunAndReturn(run func(*domain.Order) error) *MockOrderRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
