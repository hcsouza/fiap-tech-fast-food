// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "github.com/hcsouza/fiap-tech-fast-food/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockProductRepository is an autogenerated mock type for the ProductRepository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: id
func (_m *MockProductRepository) Find(id string) (*domain.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockProductRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - id string
func (_e *MockProductRepository_Expecter) Find(id interface{}) *MockProductRepository_Find_Call {
	return &MockProductRepository_Find_Call{Call: _e.mock.On("Find", id)}
}

func (_c *MockProductRepository_Find_Call) Run(run func(id string)) *MockProductRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProductRepository_Find_Call) Return(_a0 *domain.Product, _a1 error) *MockProductRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductRepository_Find_Call) RunAndReturn(run func(string) (*domain.Product, error)) *MockProductRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: product
func (_m *MockProductRepository) Save(product *domain.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockProductRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - product *domain.Product
func (_e *MockProductRepository_Expecter) Save(product interface{}) *MockProductRepository_Save_Call {
	return &MockProductRepository_Save_Call{Call: _e.mock.On("Save", product)}
}

func (_c *MockProductRepository_Save_Call) Run(run func(product *domain.Product)) *MockProductRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Product))
	})
	return _c
}

func (_c *MockProductRepository_Save_Call) Return(_a0 error) *MockProductRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductRepository_Save_Call) RunAndReturn(run func(*domain.Product) error) *MockProductRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
