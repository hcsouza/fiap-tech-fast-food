// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "github.com/hcsouza/fiap-tech-fast-food/internal/core/domain"
	cpf "github.com/hcsouza/fiap-tech-fast-food/internal/core/valueObject/cpf"

	mock "github.com/stretchr/testify/mock"
)

// MockCustomerRepository is an autogenerated mock type for the CustomerRepository type
type MockCustomerRepository struct {
	mock.Mock
}

type MockCustomerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomerRepository) EXPECT() *MockCustomerRepository_Expecter {
	return &MockCustomerRepository_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: _a0
func (_m *MockCustomerRepository) Find(_a0 cpf.CPF) (*domain.Customer, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(cpf.CPF) (*domain.Customer, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(cpf.CPF) *domain.Customer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(cpf.CPF) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomerRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockCustomerRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - _a0 cpf.CPF
func (_e *MockCustomerRepository_Expecter) Find(_a0 interface{}) *MockCustomerRepository_Find_Call {
	return &MockCustomerRepository_Find_Call{Call: _e.mock.On("Find", _a0)}
}

func (_c *MockCustomerRepository_Find_Call) Run(run func(_a0 cpf.CPF)) *MockCustomerRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cpf.CPF))
	})
	return _c
}

func (_c *MockCustomerRepository_Find_Call) Return(_a0 *domain.Customer, _a1 error) *MockCustomerRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomerRepository_Find_Call) RunAndReturn(run func(cpf.CPF) (*domain.Customer, error)) *MockCustomerRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: customer
func (_m *MockCustomerRepository) Save(customer *domain.Customer) error {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCustomerRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockCustomerRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - customer *domain.Customer
func (_e *MockCustomerRepository_Expecter) Save(customer interface{}) *MockCustomerRepository_Save_Call {
	return &MockCustomerRepository_Save_Call{Call: _e.mock.On("Save", customer)}
}

func (_c *MockCustomerRepository_Save_Call) Run(run func(customer *domain.Customer)) *MockCustomerRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Customer))
	})
	return _c
}

func (_c *MockCustomerRepository_Save_Call) Return(_a0 error) *MockCustomerRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCustomerRepository_Save_Call) RunAndReturn(run func(*domain.Customer) error) *MockCustomerRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCustomerRepository creates a new instance of MockCustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomerRepository {
	mock := &MockCustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
